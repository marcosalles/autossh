
# Loads lits of remote keys
remoteHostsListFile=${AUTOSSH_REMOTE_HOSTS:-~/ssh_hosts_list}
remoteHosts=($(grep -E "^remoteHost" "$remoteHostsListFile" | awk '{print $2}'))

# Stores number of available remotes
remoteCount=${#remoteHosts}

# Loads params
while getopts :hexc:r:d:u: opt; do
	NUMBER_REGEX='^[0-9]+$'
	case $opt in
		h)
			showHelp="on";
			break;;
		e)
			editMode="on";
			break;;
		x)
			explainMode="on";;
		c)
			if [[ $OPTARG =~ $NUMBER_REGEX ]]; then
				cols=$OPTARG;
			fi;;
		r)
			if [[ $OPTARG =~ $NUMBER_REGEX ]]; then
				remote=$OPTARG;
			fi;;
		d)
			downloadPath="$OPTARG";;
		u)
			uploadPath="$OPTARG";;
		:)
			echo "Option -$OPTARG requires an argument.";;
	esac
done

# Loads file params
if ! [ "$showHelp" = "on" ] && ! [ "$editMode" = "on" ]; then
	declare -a fileNames
	if [ $# -ge $OPTIND ]; then
		args=( $@ )
		for i in $(seq $((OPTIND-1)) $((${#args[@]}-1))); do
			fileNames=(${fileNames[@]} ${args[$i]})
		done
		unset args
	fi
fi

# Sets default remote name truncate size
alignCols=${cols:-30}

# Sorts remotes alphabetically by name
sortHosts() {
	for id in "${remoteHosts[@]}"; do
		echo $id;
	done | sort -r > ~/.keys.tmp
	entry=$(tail -n -1 ~/.keys.tmp)
	i=1
	while [ ! "$entry" == "" ]; do
		loadRemoteParams $entry
		printf -v entryInfo "%-"$alignCols"s (%s)" "$hostName" "$systemHost"
		sortedHosts[$i]="$entryInfo"
		sortedKeys[$i]="$entry"
		i=$((i + 1))
		sed -ie '$d' ~/.keys.tmp
		entry=$(tail -n -1 ~/.keys.tmp)
	done
	rm ~/.keys.tmp
}

# Shows usage / help text
showUsage() {
	scriptName=$(basename "$0")
	echo "Usage:"
	echo "  $scriptName [opt] [opt arg] [files]"
	echo
	echo "Examples:"
	echo "  $scriptName -c 10"
	echo "           Prompts to connect to remote hosts list. Sets remote name to use 10 characters, trimming if longer and completing with whitespaces if shorter."
	echo
	echo "  $scriptName -xr 2"
	echo "           Connects you to the #2 remote (alphabetic order by key) if available, else prompts with the remote hosts list. Prints the command used to connect."
	echo
	echo "Options:"
	echo "  -h       Shows this help text and exits."
	echo
	echo "  -e       Edits current AUTOSSH_REMOTE_HOSTS file using default \$EDITOR or vim. If the file is missing, creates a default with sample values."
	echo
	echo "  -x       Explain mode. Prints the remote connecting command before executing."
	echo
	echo "  -r n     n: remote number. Skips the remote hosts listing and uses the remote attached to that number, if valid. Ignores non-integers."
	echo
	echo "  -c n     n: remote name offset size. Number of columns the remote name will use, with blanks on the right. Ignores non-integers. Default: 30."
	echo
	echo "  -u f     f: file path. Path where uploaded files will be saved remotely."
	echo
	echo "  -d f     f: file path. Path where downloaded files will be saved locally."
	echo
	echo "  files    Extra params that will be considered paths for upload or a single path for download. Wildcards can be used for downloading, but as of now it might bug if it matches anything locally."
	echo
	if [ $remoteCount -eq 0 ]; then
		echo
		echo "You have no remotes registered. To register a remote, create a AUTOSSH_REMOTE_HOSTS file, export its path to the AUTOSSH_REMOTE_HOSTS variable and follow the pattern, one for each entry:"
		echo "  remoteHost remote-key-no-spaces-or-special-characters && {"
		echo "    hostName=\"Your host name written however you want it to\""
		echo "    sshKey=/path/to/your/private/key (or only key file if in ~/.ssh)"
		echo "    userName=remote host user"
		echo "    address=remote host address"
		echo "  }"
	fi
}

# Selects a remote to connect to
selectRemote() {
	select selectedRemote in "${sortedHosts[@]}" "Exit (0)"
	do
		case $REPLY in
			0|$((remoteCount + 1)))
			  echo 0;
				break;;
			*)
				if [ $REPLY -gt ${remoteCount} ] || [ $REPLY -lt 1 ]; then
					echo >&2 "You picked an invalid remote. Try again or Exit"
					shift;
				else
					echo $REPLY;
					break;
				fi
		esac
	done
}

# Loads remote params
loadRemoteParams() {
	localRemote="$1"
	function remoteHost { test $1 = $localRemote; }
	source $remoteHostsListFile
	if [ ! -f $sshKey ]; then
		sshKey=~/.ssh/$sshKey
	fi
	if [ ! -f $sshKey ]; then
		echo "Host key for '$localRemote' not found. Check your '$AUTOSSH_REMOTE_HOSTS' file."
		exit 1
	fi
	systemHost="$userName@$address"
}

# Connects to remote using SSH
connectToRemote() {
	if [ "$explainMode" = "on" ]; then
		echo "The following command will be executed:"
		echo "ssh -i $sshKey $systemHost"
	fi
	echo "Connecting to $hostName.."
	ssh -i $sshKey $systemHost
}

# Downloads files from remote using SCP
downloadFromRemote() {
	if [ ${#fileNames[@]} -eq 0 ]; then
		echo "You need to specify a folder or file to download."
	else
		fileNames=$(echo "\"${fileNames[@]}\"")
		if [ "$explainMode" = "on" ]; then
			echo "The following command will be executed:"
			echo "scp -i $sshKey $systemHost:${fileNames} \"$downloadPath\""
		fi
		echo "Downloading files from $hostName.."
		# Workaround because the fuckin bash is surrounding my string with single-quotes
		eval $(echo "scp -i $sshKey $systemHost:${fileNames} \"$downloadPath\"")
	fi
}

# Uploads files to remote using SCP
uploadToRemote() {
	if [ ${#fileNames[@]} -eq 0 ]; then
		echo "You need to specify folders or files to upload."
	else
		if [ "$explainMode" = "on" ]; then
			echo "The following command will be executed:"
			echo "scp -i $sshKey \"${fileNames[@]}\" $systemHost:\"$uploadPath\""
		fi
		echo "Uploading files to $hostName.."
		scp -i $sshKey "${fileNames[@]}" $systemHost:"$uploadPath"
	fi
}

# Creates a sample hosts file
createSampleHost() {
	if ! [ -f $remoteHostsListFile ]; then
		echo "# REMOTES LIST" >> $remoteHostsListFile
		echo >> $remoteHostsListFile
		echo "remoteHost remote-key-no-spaces-or-special-characters && {" >> $remoteHostsListFile
		echo "  hostName=\"Your host name written however you want it to\"" >> $remoteHostsListFile
		echo "  sshKey=/path/to/your/private/key (or only key file if in ~/.ssh)" >> $remoteHostsListFile
		echo "  userName=remote host user" >> $remoteHostsListFile
		echo "  address=remote host address" >> $remoteHostsListFile
		echo "}" >> $remoteHostsListFile
		echo >> $remoteHostsListFile
	fi
}

# Starts the script
start() {
	if [ "$editMode" = "on" ]; then
		createSampleHost
		${EDITOR:-vim} $remoteHostsListFile
		exit 0
	fi

	if [ $remoteCount -eq 0 ] || [ "$showHelp" = "on" ]; then
		showUsage
		exit 0
	fi

	declare -a sortedHosts; declare -a sortedKeys; sortHosts

	if [ -z ${remote+x} ]; then
		remote=$(selectRemote)
	elif [ $remote -lt 0 ] || [ $remote -gt $remoteCount ]; then
		echo "You picked an invalid remote. Try again or Exit"
		remote=$(selectRemote)
	fi

	if [ $remote -eq 0 ]; then
		exit 1
	fi

	loadRemoteParams ${sortedKeys[$remote]}

	if ! [ -z "${downloadPath+x}" ]; then
		downloadFromRemote
	elif ! [ -z "${uploadPath+x}" ]; then
		uploadToRemote
	else
		connectToRemote
	fi
}

start
